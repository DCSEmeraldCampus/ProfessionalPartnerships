@model IEnumerable<ProfessionalPartnerships.Data.Models.Programs>
@{
    ViewData["Title"] = "Student Dashboard";
}

<h3>Programs</h3>

<div id="react-root"></div>

@section Scripts {
    <script>
        var App = React.createClass({
            fetchData: function(keyword) {
                var ui = this;
                var params = {}
                if (ui.state.keyword) {
                    params.keyword = ui.state.keyword;
                }
                $.post('/StudentDashboard/GetPrograms',params).success(function(rows) {
                    ui.setState({rows:rows});
                });
            },
            getInitialState: function() {

                this.cols = [
                    {display:'Type', col:'programTypeName'},
                    {display:'Description', col:'description'},
                    {display:'Max Student Count', col: 'maximumStudentCount'},
                    {display:'Enrolled Count', col:'enrolledCount'},
                    {display:'Action', render: this.renderActionCol}];

                return { rows: [] };
            },
            componentDidMount: function() {
                this.fetchData();
            },
            setKeyword: function(evt) {
                this.setState({keyword: evt.target.value})
            },
            reset: function() {
                this.setState({keyword:''}, this.fetchData);
            },
            applyProgram: function(row) {
                var ui = this;
                var params = { programId : row.programId };
                $.post('/StudentDashboard/ApplyProgram',params).success(function(result) {
                    if (result.error) {
                        alert(result.error);
                        return;
                    }
                    Object.keys(result).forEach(function(key) {
                        row[key] = result[key];
                    })
                    ui.setState({rows:ui.state.rows});
                    console.log(result);
                });
            },
            renderActionCol: function(row, rowIdx, colIdx) {
                var ui = this;
                var applyButton = R("button", { className: "btn btn-primary", onClick: ui.applyProgram.bind(ui, row)}, "Apply")
                var actionElement = applyButton;
                if (row.enrollmentStatus) {
                    actionElement = R("span", row.enrollmentStatus);
                } else if (row.enrolledCount >= row.maximumStudentCount) {
                    actionElement = R("span",  "Filled")
                }
                return R("td",{key: 'col' + rowIdx }, actionElement);
            },
            render: function () {
                var ui = this;
                var makeRows = function() {
                    return ui.state.rows.map(function(row,rowIdx) {
                        return R("tr",{key:rowIdx}, ui.cols.map(function(col, colIdx) {
                            return col.render != undefined ? col.render(row, rowIdx, colIdx) : R("td", {key: colIdx}, row[col.col]);
                        }));
                    })
                }
                var makeTable = function() {
                    return React.createElement("table", { className: "table" },
                        Rs("thead",
                        R("tr", ui.cols.map(function (col, i) { return R("td", {key: i}, col.display) }))),
                        R("tbody",makeRows())
                    );
                }
                var makeFilters = function() {
                    return Rs("div",
                                R("label", "Keyword"),
                                R("input", {type: 'text', value: ui.state.keyword, onChange: ui.setKeyword}),
                                R("button",{onClick: function() { ui.fetchData()}, className:"btn btn-primary" }, "Search"),
                                R("button",{onClick: ui.reset, className:"btn btn-secondary" }, "Reset")
                    );
                }
                return Rs("div",
                    makeFilters(),
                    makeTable()
                );
            }
        });

        var root = document.getElementById("react-root");
        var app = React.createElement(App);
        ReactDOM.render(app, root);
    </script>
}
